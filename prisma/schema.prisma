// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleEnumType {
  superadmin
  admin
  supervisor
  farmer
  user
  aggregator
  logistics
}

model User {
  id              String  @id @default(uuid())
  user_type_id    Int?
  role            String
  role_id         Int?
  first_name      String
  last_name       String?
  phone           String  @unique
  email           String  @unique
  password        String  @default("12345678")
  staff_id        String? @unique
  code            String?
  gender          String?
  profile_picture String?
  nationality     String?
  state_id        Int?
  local_govt_id   Int?
  ward_id         Int?
  ip              String?
  address         String?
  verified        Boolean @default(false)
  isSuperAdmin    Boolean @default(false)

  email_verification_code String?   @unique @db.VarChar(90)
  email_verification_at   DateTime?

  phone_verification_code String?   @unique @db.VarChar(90)
  phone_verification_at   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  provider String?

  password_reset_token String?
  password_reset_at    DateTime?

  prosperityHub ProsperityHub[]
  warhouse      Warehouse[]
  farm          Farm[]

  user_type  UserType?  @relation(fields: [user_type_id], onDelete: Cascade, references: [id])
  state_      State?     @relation(fields: [state_id], onDelete: Cascade, references: [id])
  local_govt LocalGovt? @relation(fields: [local_govt_id], onDelete: Cascade, references: [id])
  ward       Ward?      @relation(fields: [ward_id], onDelete: Cascade, references: [id])
  role_       Role?      @relation(fields: [role_id], onDelete: Cascade, references: [id])

  @@unique([email, phone, email_verification_code, password_reset_token, phone_verification_code])
  @@index([email_verification_code, password_reset_token, phone_verification_code])
  @@index([user_type_id])
  @@index([role_id])
  @@index([state_id])
  @@index([local_govt_id])
  @@index([ward_id])
  @@map(name: "users")
}

model UserType {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  is_admin Boolean @default(false)
  users    User[]

  @@map(name: "user_types")
}

model State {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  users      User[]
  local_govt LocalGovt[]

  @@map(name: "states")
}

model LocalGovt {
  id       Int    @id @default(autoincrement())
  name     String @unique
  state_id Int
  users    User[]
  ward     Ward[]

  state State? @relation(fields: [state_id], onDelete: Cascade, references: [id])

  @@index([state_id])
  @@map(name: "local_governments")
}

model Ward {
  id                  Int    @id @default(autoincrement())
  name                String @unique
  local_government_id Int
  users               User[]

  local_govt LocalGovt @relation(fields: [local_government_id], onDelete: Cascade, references: [id])

  @@index([local_government_id])
  @@map(name: "wards")
}

model Role {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique @default("user")
  permissions         Permission[]
  users               User[]
  role_has_permission RoleHasPermission[]

  @@map(name: "roles")
}

model Permission {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique @default("read")
  role                Role[]
  role_has_permission RoleHasPermission[]

  @@map(name: "permissions")
}

model RoleHasPermission {
  id            Int @id @default(autoincrement())
  role_id       Int
  permission_id Int

  role       Role       @relation(fields: [role_id], references: [id])
  permission Permission @relation(fields: [permission_id], references: [id])

  @@index([role_id])
  @@index([permission_id])
  @@map(name: "role_has_permissions")
}

model ProsperityHub {
  id               String  @id @default(uuid())
  name             String  @unique
  location         String
  closest_landmark String?
  state            String
  local_govt       String
  ward             String?
  status           Boolean @default(false)
  user             User    @relation(fields: [user_id], references: [id])
  user_id          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@map(name: "prosperity-hubs")
}

model Warehouse {
  id               String  @id @default(uuid())
  name             String  @unique
  location         String
  closest_landmark String  @default("")
  state            String
  local_govt       String
  ward             String  @default("")
  status           Boolean @default(false)
  user             User    @relation(fields: [user_id], references: [id])
  user_id          String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@map(name: "warehouses")
}

model Farm {
  id         String  @id @default(uuid())
  name       String  @unique
  latitude   String
  longitude  String
  landmark   String?
  size       String
  location   String
  crop       String?
  state      String
  local_govt String
  ward       String  @default("")
  status     Boolean @default(false)
  user_id    String

  user User @relation(fields: [user_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([user_id])
  @@map(name: "farms")
}
