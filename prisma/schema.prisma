// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  @@map(name: "users")
  id    String     @id @default(uuid())
  first_name  String
  last_name  String?
  phone String @unique
  email String  @unique
  password String 
  gender String?
  avatar String  @default("")
  nationality String  @default("")
  state String @default("")
  local_govt String @default("")
  ward String @default("")
  address String? @default("")
  marital_status String? @default("")
  verified Boolean? @default(false)

  role RoleEnumType @default(user)

  verificationCode String? @unique @db.VarChar(90)
  verificationCodeAt DateTime?

  phoneVerificationCode String? @unique @db.VarChar(90)
  phoneVerificationAt DateTime?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())

  provider String?

  passwordResetToken String?
  passwordResetAt DateTime?

  prosperityHub ProsperityHub[]
  warhouse Warehouse[]

  @@unique([email, phone, verificationCode, passwordResetToken, phoneVerificationCode])
  @@index([email, verificationCode, passwordResetToken, phoneVerificationCode])
}

enum RoleEnumType {
  user
  farmer
  admin
  agent
  buyer
  dealer
  aggregator
  logistics
}

model ProsperityHub {
  @@map(name: "prosperityHubs")
  id        String     @id @default(uuid())
  name     String @unique
  address   String?
  state     String  @default("")
  localGovt  String @default("")
  remarks   String?
  status   Boolean @default(false)
  agent   User   @relation(fields: [userId], onDelete: Cascade, references: [id])
  userId   String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
}

model Warehouse {
  @@map(name: "warehouses")
  id        String     @id @default(uuid())
  name     String @unique
  state String @default("")
  localGovt String @default("")
  address     String
  remarks     String?
  status Boolean @default(false)
  agent   User   @relation(fields: [userId], onDelete: Cascade, references: [id])
  userId String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
}

model Farm {
  @@map(name: "farms")
  id        String     @id @default(uuid())
  name     String @unique
  size String ?
  location String?
  crop     String?
  status Boolean @default(false)
  action String @default("")

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt @default(now())
}