// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String   @id @default(uuid())
  first_name     String
  last_name      String?
  phone          String   @unique
  email          String   @unique
  password       String
  gender         String?
  avatar         String?
  nationality    String?
  state          String
  local_govt     String
  ward           String?
  address        String?
  marital_status String?
  verified       Boolean? @default(false)
  isSuperAdmin   Boolean  @default(false)

  verificationCode   String?   @unique @db.VarChar(90)
  verificationCodeAt DateTime?

  phoneVerificationCode String?   @unique @db.VarChar(90)
  phoneVerificationAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  provider String?

  passwordResetToken String?
  passwordResetAt    DateTime?

  prosperityHub ProsperityHub[]
  warhouse      Warehouse[]
  farm          Farm[]
  wallet        Wallet[]

  role   Role? @relation(fields: [roleId], onDelete: Cascade, references: [id])
  roleId Int?

  @@unique([email, phone, verificationCode, passwordResetToken, phoneVerificationCode])
  @@index([email, verificationCode, passwordResetToken, phoneVerificationCode])
  @@index([roleId])
  @@map(name: "users")
}

enum RoleEnumType {
  admin
  supervisor
  agent
  farmer
  aggregator
  user
  dealer
  logistics
}

enum PermissionEnumType {
  read
  create
  update
  delete
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique @default("user")
  permissions Permission[]
  users       User[]

  @@map(name: "roles")
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String @unique @default("read")
  role Role[]

  @@map(name: "permissions")
}

model ProsperityHub {
  id               String     @id @default(uuid())
  name             String  @unique
  location         String
  closest_landmark String?
  state            String
  local_govt       String
  ward             String?
  status           Boolean @default(false)
  user             User    @relation(fields: [userId], references: [id])
  userId           String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "prosperityHubs")
}

model Warehouse {
  id               String     @id @default(uuid())
  name             String  @unique
  location         String
  closest_landmark String  @default("")
  state            String
  local_govt       String
  ward             String  @default("")
  status           Boolean @default(false)
  user             User    @relation(fields: [userId], references: [id])
  userId           String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "warehouses")
}

model Farm {
  id               String     @id @default(uuid())
  name             String  @unique
  size             String
  location         String
  closest_landmark String?
  crop             String?
  state            String
  local_govt       String
  ward             String  @default("")
  status           Boolean @default(false)
  user             User    @relation(fields: [userId], references: [id])
  userId           String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "farms")
}

model Wallet {
  id             String  @id @default(uuid())
  bvn            String  @unique
  bank           String
  account_number String
  account_name   String?
  status         Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@map(name: "wallets")
}
